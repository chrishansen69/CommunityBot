'use strict';
// Generated by CoffeeScript 1.9.1
(function() {
  let XMLDTDEntity; let create; let isObject;

  create = require('lodash/create');

  isObject = require('lodash/isObject');

  module.exports = XMLDTDEntity = (function() {
    function XMLDTDEntity(parent, pe, name, value) {
      this.stringify = parent.stringify;
      if ((name === null || name === undefined)) {
        throw new Error('Missing entity name');
      }
      if ((value === null || value === undefined)) {
        throw new Error('Missing entity value');
      }
      this.pe = !!pe;
      this.name = this.stringify.eleName(name);
      if (!isObject(value)) {
        this.value = this.stringify.dtdEntityValue(value);
      } else {
        if (!value.pubID && !value.sysID) {
          throw new Error('Public and/or system identifiers are required for an external entity');
        }
        if (value.pubID && !value.sysID) {
          throw new Error('System identifier is required for a public external entity');
        }
        if (value.pubID !== null || value.pubID !== undefined) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID !== null || value.sysID !== undefined) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
        if (value.nData !== null || value.nData !== undefined) {
          this.nData = this.stringify.dtdNData(value.nData);
        }
        if (this.pe && this.nData) {
          throw new Error('Notation declaration is not allowed in a parameter entity');
        }
      }
    }

    XMLDTDEntity.prototype.toString = function(options, level) {
      let indent; let newline; let offset; let pretty; let r; let ref; let ref1; let ref2; let space;
      pretty = ((options !== null || options !== undefined) ? options.pretty : undefined) || false;
      indent = (ref = (options !== null || options !== undefined) ? options.indent : undefined) != null ? ref : '  ';
      offset = (ref1 = (options !== null || options !== undefined) ? options.offset : undefined) != null ? ref1 : 0;
      newline = (ref2 = (options !== null || options !== undefined) ? options.newline : undefined) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ENTITY';
      if (this.pe) {
        r += ' %';
      }
      r += ' ' + this.name;
      if (this.value) {
        r += ' "' + this.value + '"';
      } else {
        if (this.pubID && this.sysID) {
          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
        } else if (this.sysID) {
          r += ' SYSTEM "' + this.sysID + '"';
        }
        if (this.nData) {
          r += ' NDATA ' + this.nData;
        }
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDEntity;

  })();

}).call(this);
