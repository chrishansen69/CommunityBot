'use strict';
// Generated by CoffeeScript 1.9.1
(function() {
  let XMLCData; let XMLNode; let create; let
    extend = function(child, parent) { for (const key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLCData = (function(superClass) {
    extend(XMLCData, superClass);

    function XMLCData(parent, text) {
      XMLCData.__super__.constructor.call(this, parent);
      if ((text === null || text === undefined)) {
        throw new Error('Missing CDATA text');
      }
      this.text = this.stringify.cdata(text);
    }

    XMLCData.prototype.clone = function() {
      return create(XMLCData.prototype, this);
    };

    XMLCData.prototype.toString = function(options, level) {
      let indent; let newline; let offset; let pretty; let r; let ref; let ref1; let ref2; let space;
      pretty = ((options !== null || options !== undefined) ? options.pretty : undefined) || false;
      indent = (ref = (options !== null || options !== undefined) ? options.indent : undefined) != null ? ref : '  ';
      offset = (ref1 = (options !== null || options !== undefined) ? options.offset : undefined) != null ? ref1 : 0;
      newline = (ref2 = (options !== null || options !== undefined) ? options.newline : undefined) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<![CDATA[' + this.text + ']]>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLCData;

  })(XMLNode);

}).call(this);
