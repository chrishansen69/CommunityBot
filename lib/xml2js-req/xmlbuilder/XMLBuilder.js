'use strict';
// Generated by CoffeeScript 1.9.1
let XMLDeclaration; let XMLDocType; let XMLElement; let XMLStringifier;

XMLStringifier = require('./XMLStringifier');

XMLDeclaration = require('./XMLDeclaration');

XMLDocType = require('./XMLDocType');

XMLElement = require('./XMLElement');

module.exports = (function() {
  function XMLBuilder(name, options) {
    let root; let temp;
    if ((name === null || name === undefined)) {
      throw new Error('Root element needs a name');
    }
    if ((options === null || options === undefined)) {
      options = {};
    }
    this.options = options;
    this.stringify = new XMLStringifier(options);
    temp = new XMLElement(this, 'doc');
    root = temp.element(name);
    root.isRoot = true;
    root.documentObject = this;
    this.rootObject = root;
    if (!options.headless) {
      root.declaration(options);
      if ((options.pubID !== null || options.pubID !== undefined) || (options.sysID !== null || options.sysID !== undefined)) {
        root.doctype(options);
      }
    }
  }

  XMLBuilder.prototype.root = function() {
    return this.rootObject;
  };

  XMLBuilder.prototype.end = function(options) {
    return this.toString(options);
  };

  XMLBuilder.prototype.toString = function(options) {
    let indent; let newline; let offset; let pretty; let r; let ref; let ref1; let ref2;
    pretty = ((options !== null || options !== undefined) ? options.pretty : undefined) || false;
    indent =  !!(ref = (options !== null || options !== undefined) ? options.indent : undefined)   ? ref : '  ';
    offset =  !!(ref1 = (options !== null || options !== undefined) ? options.offset : undefined)  ? ref1 : 0;
    newline = !!(ref2 = (options !== null || options !== undefined) ? options.newline : undefined) ? ref2 : '\n';
    r = '';
    if (this.xmldec !== null || this.xmldec !== undefined) {
      r += this.xmldec.toString(options);
    }
    if (this.doctype !== null || this.doctype !== undefined) {
      r += this.doctype.toString(options);
    }
    r += this.rootObject.toString(options);
    if (pretty && r.slice(-newline.length) === newline) {
      r = r.slice(0, -newline.length);
    }
    return r;
  };

  return XMLBuilder;

})();